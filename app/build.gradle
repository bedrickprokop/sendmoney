apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "br.com.example.sendmoney"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    sourceSets {
        mock { java.srcDirs = ['src/mock/java', 'src/mock/java/'] }
        prod { java.srcDirs = ['src/prod/java', 'src/prod/java/'] }
        main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        mock {
            dimension "version"
            //applicationIdSuffix = ".mock"
            versionNameSuffix "-mock"
        }
        prod {
            dimension "version"
            //applicationIdSuffix = ".prod"
            versionNameSuffix "-prod"
        }
    }

    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    dokka {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/dokka"

        configuration {
            moduleName = 'app'
            // Use to include or exclude non public members.
            includeNonPublic = false
            // Do not output deprecated members. Applies globally, can be overridden by packageOptions
            skipDeprecated = false
            // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
            reportUndocumented = true
            // Do not create index pages for empty packages
            skipEmptyPackages = true

            // ???
            // This is a list of platform names that will be shown in the final result. See the "Platforms" section of this readme
            targets = ["JVM"]
            // Platform used for code analysis. See the "Platforms" section of this readme
            platform = "JVM"

            // ???
            // Property used for manual addition of files to the classpath
            // This property does not override the classpath collected automatically but appends to it
            /*classpath = [new File("$buildDir/other.jar")]*/

            // ???
            // List of files with module and package documentation
            // https://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
            includes = ['packages.md', 'extra.md']

            // List of files or directories containing sample code (referenced with @sample tags)
            /*samples = ['samples/basic.kt', 'samples/advanced.kt']*/

            // By default, sourceRoots are taken from Kotlin Plugin, subProjects and kotlinTasks, following roots will be appended to them
            // Full form sourceRoot declaration
            // Repeat for multiple sourceRoots
            /*sourceRoot {
                // Path to a source root
                path = "src"
            }*/

            // These tasks will be used to determine source directories and classpath
            /*kotlinTasks {
                defaultKotlinTasks() + [':some:otherCompileKotlin', project("another").compileKotlin]
            }*/

            // Specifies the location of the project source code on the Web.
            // If provided, Dokka generates "source" links for each declaration.
            // Repeat for multiple mappings
            sourceLink {
                // Unix based directory relative path to the root of the project (where you execute gradle respectively).
                path = "src/main/kotlin" // or simply "./"

                // URL showing where the source code can be accessed through the web browser
                url = "https://github.com/cy6erGn0m/vertx3-lang-kotlin/blob/master/src/main/kotlin" //remove src/main/kotlin if you use "./" above

                // Suffix which is used to append the line number to the URL. Use #L for GitHub
                lineSuffix = "#L"
            }

            // Used for linking to JDK documentation
            jdkVersion = 9

            // Disable linking to online kotlin-stdlib documentation
            noStdlibLink = false

            // Disable linking to online JDK documentation
            noJdkLink = false

            // ???
            // Allows linking to documentation of the project's dependencies (generated with Javadoc or Dokka)
            // Repeat for multiple links
            /*externalDocumentationLink {
                // Root URL of the generated documentation to link with. The trailing slash is required!

                // https://en.ryte.com/wiki/Trailing_Slashes
                // A trailing slash is the forward slash placed at the end of a URL. The trailing slash is
                // generally used to mark a directory, and if a URL is not terminated using a trailing slash,
                // this generally points to a file. However, these are guidelines, and not requirements.
                url = new URL("https://example.com/docs/")

                // If package-list file is located in non-standard location
                // packageListUrl = new URL("file:///home/user/localdocs/package-list")
            }*/

            // Allows to customize documentation generation options on a per-package basis
            // Repeat for multiple packageOptions
            /*perPackageOption {
                prefix = "kotlin" // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                skipDeprecated = false
                reportUndocumented = true   // Emit warnings about not documented members
                includeNonPublic = false
            }
            // Suppress a package
            perPackageOption {
                prefix = "kotlin.internal" // will match kotlin.internal and all sub-packages of it
                suppress = true
            }*/

            perPackageOption {
                prefix = "br.com.example.sendmoney.view.ui"
                skipDeprecated = false
                reportUndocumented = true
                includeNonPublic = true
                suppress = false
            }
            perPackageOption {
                prefix = "br.com.example.sendmoney"
                suppress = true
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // APP'S DEPENDENCIES
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // MATERIAL DESIGN
    implementation "com.google.android.material:material:1.1.0"

    // KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'

    // RETROFIT
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"

    // RETROFIT
    mockImplementation "com.squareup.retrofit2:retrofit:$rootProject.ext.retrofitVersion"
    mockImplementation "com.squareup.retrofit2:converter-gson:$rootProject.ext.retrofitVersion"

    // IDLING RESOURCES
    implementation "androidx.test.espresso:espresso-idling-resource:3.2.0"

    /*
    // LOCAL UNIT TESTS
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    */

    // ANDROID TESTING SUPPORT LIBRARY'S RUNNER AND RULES
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation "androidx.test:rules:1.2.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    androidTestImplementation 'com.google.truth:truth:1.0.1'

    // ESPRESSO UI TESTING DEPENDENCIES
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.2.0"
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:3.2.0"
}
